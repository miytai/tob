import os
import re
import json
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from openai import OpenAI
import httpx
import nest_asyncio

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)
user_data = {}

# –ì–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –∏–≤—Ä–∏—Ç–µ
HEBREW_GREETING = "◊©◊ú◊ï◊ù! ◊ê◊†◊ô ◊î◊ë◊ï◊ò ◊©◊ú◊ö ◊ú◊ú◊ô◊û◊ï◊ì ◊¢◊ë◊®◊ô◊™. ◊©◊ú◊ó ◊ú◊ô ◊î◊ï◊ì◊¢◊™ ◊ß◊ï◊ú ◊ï◊ê◊†◊ô ◊ê◊¢◊ñ◊ï◊® ◊ú◊ö."

# URL –¥–ª—è WebApp (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Cloudflare Tunnel URL)
WEBAPP_URL = "https://your-tunnel-url.cfargotunnel.com/webapp"
print(f"Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {WEBAPP_URL}")

async def send_voice_greeting(chat_id, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    audio_data = await generate_voice(HEBREW_GREETING)
    voice_path = "greeting.mp3"
    with open(voice_path, "wb") as f:
        f.write(audio_data)

    await context.bot.send_voice(
        chat_id=chat_id,
        voice=open(voice_path, "rb"),
        caption="üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –∏–≤—Ä–∏—Ç–µ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
             InlineKeyboardButton("üìñ –†–∞–∑–±–æ—Ä —Å–ª–æ–≤", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
    )
    os.remove(voice_path)

async def generate_voice(text: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ ElevenLabs"""
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM",
            headers={"xi-api-key": ELEVENLABS_API_KEY},
            json={"text": text, "voice_settings": {"stability": 0.5, "similarity_boost": 0.8}},
            timeout=30
        )
        return response.content

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–≤—Ä–∏—Ç–∞!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
             InlineKeyboardButton("üìñ –†–∞–∑–±–æ—Ä —Å–ª–æ–≤", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
    )
    await send_voice_greeting(update.message.chat_id, context)

async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    query = update.callback_query
    await query.answer()

    help_text = (
        "ü§ñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏–≤—Ä–∏—Ç–µ\n"
        "2. –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
        "   - <b>‚ùì –ü–æ–º–æ—â—å</b> - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "   - <b>üìñ –†–∞–∑–±–æ—Ä —Å–ª–æ–≤</b> - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å\n\n"
        "–í —Å–ª–æ–≤–∞—Ä–µ –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."
    )

    await query.edit_message_text(
        text=help_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )

async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
    data = json.loads(update.effective_message.web_app_data.data)
    word = data.get('word')
    
    if word:
        analysis = await analyze_word(word)
        await update.message.reply_text(
            text=f"üîç <b>–†–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞:</b> {word}\n\n"
                 f"üìñ <b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b> {analysis.get('transcription', 'N/A')}\n"
                 f"üåç <b>–ü–µ—Ä–µ–≤–æ–¥:</b> {analysis.get('translation', 'N/A')}\n"
                 f"üìö <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b> {analysis.get('explanation', 'N/A')}",
            parse_mode="HTML"
        )

async def analyze_word(word: str):
    """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ ChatGPT"""
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": f"–î–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∏–≤—Ä–∏—Ç—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞: {word}\n"
                           "–§–æ—Ä–º–∞—Ç: JSON: {'transcription': '...', 'translation': '...', 'explanation': '...'}"
            }],
            temperature=0.3
        )
        return eval(response.choices[0].message.content)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–≤–∞: {e}")
        return {"transcription": "N/A", "translation": "N/A", "explanation": "N/A"}

async def back_to_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
             InlineKeyboardButton("üìñ –†–∞–∑–±–æ—Ä —Å–ª–æ–≤", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
    )

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ asyncio (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥)
    nest_asyncio.apply()
    
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(help_callback, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(back_to_main_callback, pattern="^back_to_main$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ Mini App –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å–ª–æ–≤")
    print(f"Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {WEBAPP_URL}")
    app.run_polling()

if __name__ == "__main__":
    main()